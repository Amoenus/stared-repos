{"ast":null,"code":"var _jsxFileName = \"/Users/oliver_almalel/Desktop/Ruby Projects/Curriculum/09 GraphQL/W18D4 Frontend User Auth/online_store_part_2/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport Mutations from './graphql/mutations';\nconst VERIFY_USER = Mutations.VERIFY_USER;\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\nconst token = localStorage.getItem(\"auth-token\");\ncache.writeData({\n  data: {\n    isLoggedIn: Boolean(token),\n    cart: []\n  }\n});\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\",\n  headers: {\n    // pass our token into the header of each request\n    authorization: localStorage.getItem(\"auth-token\")\n  }\n}); // make sure we log any additional errors we receive\n// const errorLink = onError(({ graphQLErrors }) => {\n//   if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n// });\n// const client = new ApolloClient({\n//   link: ApolloLink.from([errorLink, httpLink]),\n//   cache\n// });\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\nif (token) {\n  client // use the VERIFY_USER mutation directly use the returned data to know if the returned\n  // user is loggedIn\n  .mutate({\n    mutation: VERIFY_USER,\n    variables: {\n      token\n    }\n  }).then(({\n    data\n  }) => {\n    cache.writeData({\n      data: {\n        isLoggedIn: data.verifyUser.loggedIn,\n        cart: []\n      }\n    });\n  });\n} else {\n  // otherwise we can just set isLoggedIn to false\n  cache.writeData({\n    data: {\n      isLoggedIn: false,\n      cart: []\n    }\n  });\n}\n\nconst Root = () => {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(HashRouter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })));\n};\n\nReactDOM.render(React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89\n  },\n  __self: this\n}), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/oliver_almalel/Desktop/Ruby Projects/Curriculum/09 GraphQL/W18D4 Frontend User Auth/online_store_part_2/client/src/index.js"],"names":["React","ReactDOM","HashRouter","App","serviceWorker","ApolloClient","InMemoryCache","createHttpLink","ApolloProvider","onError","ApolloLink","Mutations","VERIFY_USER","cache","dataIdFromObject","object","_id","token","localStorage","getItem","writeData","data","isLoggedIn","Boolean","cart","httpLink","uri","headers","authorization","client","link","networkError","graphQLErrors","console","log","mutate","mutation","variables","then","verifyUser","loggedIn","Root","render","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport Mutations from './graphql/mutations';\nconst { VERIFY_USER } = Mutations;\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\n\nconst token = localStorage.getItem(\"auth-token\"); \n\ncache.writeData({\n  data: {\n    isLoggedIn: Boolean(token),\n    cart: []\n  }\n});\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\",\n  headers: {\n    // pass our token into the header of each request\n    authorization: localStorage.getItem(\"auth-token\")\n  }\n});\n\n// make sure we log any additional errors we receive\n// const errorLink = onError(({ graphQLErrors }) => {\n//   if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n// });\n\n// const client = new ApolloClient({\n//   link: ApolloLink.from([errorLink, httpLink]),\n//   cache\n// });\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\nif (token) {\n  client\n    // use the VERIFY_USER mutation directly use the returned data to know if the returned\n    // user is loggedIn\n    .mutate({ mutation: VERIFY_USER, variables: { token } })\n    .then(({ data }) => {\n      cache.writeData({\n        data: {\n          isLoggedIn: data.verifyUser.loggedIn,\n          cart: []\n        }\n      });\n    });\n} else {\n   // otherwise we can just set isLoggedIn to false\n   cache.writeData({\n    data: {\n      isLoggedIn: false,\n      cart: []\n    }\n  });\n}\n\nconst Root = () => {\n  return (\n    <ApolloProvider client={client}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}