{"ast":null,"code":"var _jsxFileName = \"/Users/oliver_almalel/Desktop/Ruby Projects/Curriculum/09 GraphQL/W18D4 Frontend User Auth/online_store_part_2/client/src/components/products/CreateProduct.js\";\nimport React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../../graphql/mutations\";\nimport Queries from \"../../graphql/queries\";\nconst CREATE_PRODUCT = Mutations.CREATE_PRODUCT;\nconst FETCH_PRODUCTS = Queries.FETCH_PRODUCTS;\n\nclass CreateProduct extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\",\n      name: \"\",\n      weight: \"\",\n      description: \"\"\n    };\n  }\n\n  update(field) {\n    return e => this.setState({\n      [field]: e.target.value\n    });\n  } // we need to remember to update our cache directly with our new product\n\n\n  updateCache(cache, {\n    data\n  }) {\n    let products;\n\n    try {\n      // if we've already fetched the products then we can read the\n      // query here\n      products = cache.readQuery({\n        query: FETCH_PRODUCTS\n      });\n    } catch (err) {\n      return;\n    } // if we had previously fetched products we'll add our new product to our cache\n\n\n    if (products) {\n      let productArray = products.products;\n      let newProduct = data.newProduct;\n      cache.writeQuery({\n        query: FETCH_PRODUCTS,\n        data: {\n          products: productArray.concat(newProduct)\n        }\n      });\n    }\n  }\n\n  handleSubmit(e, newProduct) {\n    e.preventDefault();\n    newProduct({\n      variables: {\n        name: this.state.name,\n        description: this.state.description,\n        weight: parseFloat(this.state.weight)\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(Mutation, {\n      mutation: CREATE_PRODUCT // if we error out we can set the message here\n      ,\n      onError: err => this.setState({\n        message: err.message\n      }) // we need to make sure we update our cache once our new product is created\n      ,\n      update: (cache, data) => this.updateCache(cache, data) // when our query is complete we'll display a success message\n      ,\n      onCompleted: data => {\n        const name = data.newProduct.name;\n        this.setState({\n          message: \"New product \".concat(name, \" created successfully\")\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, (newProduct, {\n      data\n    }) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: e => this.handleSubmit(e, newProduct),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.update(\"name\"),\n      value: this.state.name,\n      placeholder: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      onChange: this.update(\"description\"),\n      value: this.state.description,\n      placeholder: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onChange: this.update(\"weight\"),\n      value: this.state.weight,\n      placeholder: \"Weight\",\n      type: \"number\",\n      step: \"0.25\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Create Product\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.message)));\n  }\n\n}\n\nexport default CreateProduct;","map":{"version":3,"sources":["/Users/oliver_almalel/Desktop/Ruby Projects/Curriculum/09 GraphQL/W18D4 Frontend User Auth/online_store_part_2/client/src/components/products/CreateProduct.js"],"names":["React","Component","Mutation","Mutations","Queries","CREATE_PRODUCT","FETCH_PRODUCTS","CreateProduct","constructor","props","state","message","name","weight","description","update","field","e","setState","target","value","updateCache","cache","data","products","readQuery","query","err","productArray","newProduct","writeQuery","concat","handleSubmit","preventDefault","variables","parseFloat","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\n\nimport Mutations from \"../../graphql/mutations\";\nimport Queries from \"../../graphql/queries\";\nconst { CREATE_PRODUCT } = Mutations;\nconst { FETCH_PRODUCTS } = Queries;\n\nclass CreateProduct extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: \"\",\n      name: \"\",\n      weight: \"\",\n      description: \"\"\n    };\n  }\n\n  update(field) {\n    return e => this.setState({ [field]: e.target.value });\n  }\n\n  // we need to remember to update our cache directly with our new product\n  updateCache(cache, { data }) {\n    let products;\n    try {\n      // if we've already fetched the products then we can read the\n      // query here\n      products = cache.readQuery({ query: FETCH_PRODUCTS });\n    } catch (err) {\n      return;\n    }\n    // if we had previously fetched products we'll add our new product to our cache\n    if (products) {\n      let productArray = products.products;\n      let newProduct = data.newProduct;\n      cache.writeQuery({\n        query: FETCH_PRODUCTS,\n        data: { products: productArray.concat(newProduct) }\n      });\n    }\n  }\n\n  handleSubmit(e, newProduct) {\n    e.preventDefault();\n    newProduct({\n      variables: {\n        name: this.state.name,\n        description: this.state.description,\n        weight: parseFloat(this.state.weight)\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Mutation\n        mutation={ CREATE_PRODUCT }\n        // if we error out we can set the message here\n        onError={err => this.setState({ message: err.message })}\n        // we need to make sure we update our cache once our new product is created\n        update={(cache, data) => this.updateCache(cache, data)}\n        // when our query is complete we'll display a success message\n        onCompleted={data => {\n          const { name } = data.newProduct;\n          this.setState({\n            message: `New product ${name} created successfully`\n          });\n        }}\n      >\n        {(newProduct, { data }) => (\n          <div>\n            <form onSubmit={e => this.handleSubmit(e, newProduct)}>\n              <input\n                onChange={this.update(\"name\")}\n                value={this.state.name}\n                placeholder=\"Name\"\n              />\n              <textarea\n                onChange={this.update(\"description\")} \n                value={this.state.description}\n                placeholder=\"description\"\n              />\n              <input\n                onChange={this.update(\"weight\")}\n                value={this.state.weight}\n                placeholder=\"Weight\"\n                type=\"number\"\n                step=\"0.25\"\n              />\n              <button type=\"submit\">Create Product</button>\n            </form>\n            <p>{this.state.message}</p>\n          </div>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default CreateProduct;"]},"metadata":{},"sourceType":"module"}