{"ast":null,"code":"var _jsxFileName = \"/Users/oliver_almalel/Desktop/Ruby Projects/Curriculum/09 GraphQL/W18D4 Frontend User Auth/online_store_part_2/client/src/components/cart/AddToCart.js\";\nimport React from 'react';\nimport { Query, ApolloConsumer } from 'react-apollo';\nimport Queries from '../../graphql/queries';\nconst FETCH_CART_ITEMS = Queries.FETCH_CART_ITEMS;\n\nconst AddToCart = ({\n  _id,\n  cost\n}) => {\n  return React.createElement(ApolloConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, clientCache => React.createElement(Query, {\n    query: FETCH_CART_ITEMS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return \"Loading...\";\n    if (error) return \"Error! \".concat(error.message);\n    const cartItemIds = data.cart.map(item => item.id);\n    let newCart;\n\n    if (data.cart.length || !cartItemIds.includes(_id)) {\n      return React.createElement(\"button\", {\n        onClick: () => {\n          const newItem = {\n            _id,\n            cost\n          }; // data.cart.push({_id, cost})\n\n          clientCache.writeData({\n            data: {\n              cart: [newItem]\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Add to Cart\");\n    } else {\n      return React.createElement(\"button\", {\n        onClick: () => {\n          newCart = [];\n          data.cart.forEach(item => {\n            if (item._id !== _id) newCart.push(item);\n          });\n          clientCache.writeData({\n            data: {\n              cart: newCart\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Remove from Cart\");\n    }\n  }));\n};\n\nexport default AddToCart;","map":{"version":3,"sources":["/Users/oliver_almalel/Desktop/Ruby Projects/Curriculum/09 GraphQL/W18D4 Frontend User Auth/online_store_part_2/client/src/components/cart/AddToCart.js"],"names":["React","Query","ApolloConsumer","Queries","FETCH_CART_ITEMS","AddToCart","_id","cost","clientCache","loading","error","data","message","cartItemIds","cart","map","item","id","newCart","length","includes","newItem","writeData","forEach","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,cAAhB,QAAsC,cAAtC;AACA,OAAOC,OAAP,MAAoB,uBAApB;MAEQC,gB,GAAqBD,O,CAArBC,gB;;AAER,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,GAAD;AAAMC,EAAAA;AAAN,CAAD,KAAiB;AACjC,SACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,WAAW,IACV,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAGJ,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEK,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,KAA8B;AAC7B,QAAIF,OAAJ,EAAa,OAAO,YAAP;AACb,QAAIC,KAAJ,EAAW,wBAAkBA,KAAK,CAACE,OAAxB;AAEX,UAAMC,WAAW,GAAGF,IAAI,CAACG,IAAL,CAAUC,GAAV,CAAcC,IAAI,IAAIA,IAAI,CAACC,EAA3B,CAApB;AACA,QAAIC,OAAJ;;AACA,QAAIP,IAAI,CAACG,IAAL,CAAUK,MAAV,IAAoB,CAACN,WAAW,CAACO,QAAZ,CAAqBd,GAArB,CAAzB,EAAoD;AAClD,aACE;AACE,QAAA,OAAO,EAAG,MAAM;AACd,gBAAMe,OAAO,GAAG;AAACf,YAAAA,GAAD;AAAMC,YAAAA;AAAN,WAAhB,CADc,CAEd;;AACAC,UAAAA,WAAW,CAACc,SAAZ,CAAsB;AAAEX,YAAAA,IAAI,EAAE;AAAEG,cAAAA,IAAI,EAAE,CAACO,OAAD;AAAR;AAAR,WAAtB;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF;AAWD,KAZD,MAYO;AACL,aACE;AACE,QAAA,OAAO,EAAI,MAAM;AACfH,UAAAA,OAAO,GAAG,EAAV;AACAP,UAAAA,IAAI,CAACG,IAAL,CAAUS,OAAV,CAAkBP,IAAI,IAAI;AACxB,gBAAIA,IAAI,CAACV,GAAL,KAAaA,GAAjB,EAAsBY,OAAO,CAACM,IAAR,CAAaR,IAAb;AACvB,WAFD;AAGAR,UAAAA,WAAW,CAACc,SAAZ,CAAsB;AAAEX,YAAAA,IAAI,EAAE;AAAEG,cAAAA,IAAI,EAAEI;AAAR;AAAR,WAAtB;AACD,SAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF;AAaD;AACF,GAlCH,CAFJ,CADF;AA0CD,CA3CD;;AA6CA,eAAeb,SAAf","sourcesContent":["import React from 'react'\nimport { Query, ApolloConsumer } from 'react-apollo'\nimport Queries from '../../graphql/queries'\n\nconst { FETCH_CART_ITEMS } = Queries\n\nconst AddToCart = ({_id, cost}) => {\n  return (\n    <ApolloConsumer>\n      {clientCache => (\n        <Query query={ FETCH_CART_ITEMS }>\n          {({ loading, error, data }) => {\n            if (loading) return \"Loading...\";\n            if (error) return `Error! ${ error.message }`;\n            \n            const cartItemIds = data.cart.map(item => item.id)\n            let newCart\n            if (data.cart.length || !cartItemIds.includes(_id)) {\n              return (\n                <button\n                  onClick={ () => {\n                    const newItem = {_id, cost};\n                    // data.cart.push({_id, cost})\n                    clientCache.writeData({ data: { cart: [newItem] } })\n                  }}\n                >\n                  Add to Cart\n                </button>\n              )\n            } else {\n              return (\n                <button\n                  onClick= { () => {\n                    newCart = []\n                    data.cart.forEach(item => {\n                      if (item._id !== _id) newCart.push(item)\n                    });\n                    clientCache.writeData({ data: { cart: newCart } })\n                  }}\n                >\n                  Remove from Cart\n                </button>\n              )\n            }\n          }}\n        </Query>\n      )}\n    </ApolloConsumer>\n  )\n}\n\nexport default AddToCart"]},"metadata":{},"sourceType":"module"}